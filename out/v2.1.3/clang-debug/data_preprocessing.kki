module interface data/preprocessing
 
//------------------------------
//#kki: import declarations
 
private import std/core/types = std/core/types = "";
private import std/core/hnd = std/core/hnd = "";
private import std/core = std/core = "";
private import std/num/double = std/num/double = "";
private import std/os/path = std/os/path = "";
private import std/os/file = std/os/file = "";
private import exn-get = exn-get = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
local alias effects-and-types/row_vector = (std/core/list :: V -> V)<std/core/types/double> = 1;
// An alias for pure effects: a pure function always returns the same result
// when called with the same arguments but may not terminate or raise an exception.
local alias std/core/pure :: E = <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/div :: X)> = 1;
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
// monadic lift
private fun .mlift1946-all_elements_equal : forall<(h :: H)> (bool_val : (std/core/types/local-var :: (H, V) -> V)<(h :: H),std/core/types/bool>, first_length : std/core/types/int, std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> ();
// monadic lift
private fun .mlift1947-all_elements_equal : forall<(h :: H)> (bool_val : (std/core/types/local-var :: (H, V) -> V)<(h :: H),std/core/types/bool>, wild_0 : ()) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>> std/core/types/bool;
// monadic lift
private fun .mlift1948-all_elements_equal : forall<(h :: H)> (list : (std/core/list :: V -> V)<std/core/types/int>, first_length : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> std/core/types/bool;
public fun all_elements_equal : (list : (std/core/list :: V -> V)<std/core/types/int>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> std/core/types/bool;
public fun get_thunk : (index : std/core/types/int) -> ((list : (std/core/list :: V -> V)<std/core/types/double>) -> (std/core/types/maybe :: V -> V)<std/core/types/double>);
public fun remove_maybes : (list : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, return_list : (std/core/list :: V -> V)<std/core/types/double>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> (std/core/list :: V -> V)<std/core/types/double>;
// monadic lift
private fun .mlift1949-by_month : ((std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> (std/core/list :: V -> V)<std/core/types/double>;
public fun by_month : (months : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>, index : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> (std/core/list :: V -> V)<std/core/types/double>;
// Returns a list of lists where each list corresponds to a single year (if called with parameter 12).
// Preserves order.
public fun list_of_lists : (list : (std/core/list :: V -> V)<std/core/types/double>, length : std/core/types/int) -> <(std/core/types/div :: E)> (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>;
public fun list_of_lists_thunk : forall<(e :: E)> (length : std/core/types/int) -> ((list : (std/core/list :: V -> V)<std/core/types/double>) -> <(std/core/types/div :: E)|(e :: E)> (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>);
public fun convert_to_groups : (months : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>, group_size : std/core/types/int) -> <(std/core/types/div :: X)> (std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>;
public fun length_months : (months : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>) -> (std/core/list :: V -> V)<std/core/types/int>;
// monadic lift
private fun .mlift1950-months : forall<(h :: H)> (list_of_months : (std/core/types/local-var :: (H, V) -> V)<(h :: H),(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, wild_1 : ()) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>;
// monadic lift
private fun .mlift1951-months : forall<(h :: H)> (list_of_months : (std/core/types/local-var :: (H, V) -> V)<(h :: H),(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>;
// monadic lift
private fun .mlift1952-months : forall<(h :: H)> ((std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>, list_of_months : (std/core/types/local-var :: (H, V) -> V)<(h :: H),(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, (std/core/list :: V -> V)<std/core/types/double>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> ();
// monadic lift
private fun .mlift1953-months : forall<(h :: H)> (i : std/core/types/int, list_of_months : (std/core/types/local-var :: (H, V) -> V)<(h :: H),(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, months : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> ();
// monadic lift
private fun .mlift1954-months : forall<(h :: H)> (list_of_months : (std/core/types/local-var :: (H, V) -> V)<(h :: H),(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, wild_0 : ()) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>> (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>;
// monadic lift
private fun .mlift1955-months : forall<(h :: H)> (months : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>, std/core/types/bool) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>;
/* [[1,2,3,4,5,6,...12],[1,2,3,4,5,6...12]...] -> [[1,1,1,1,1,..........1,1,1,1],[2,2,2,2,2,2,......2,2,2,]] */
public fun months : (months : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>;
// monadic lift
private fun .mlift1956-pre_process_data : (uncertainties_by_month : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>, temperatures_by_month : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> ((std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>);
// monadic lift
private fun .mlift1957-pre_process_data : (temperatures_by_year : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>, uncertainties_by_month : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> ((std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>);
// monadic lift
private fun .mlift1958-pre_process_data : (uncertainties : (std/core/list :: V -> V)<std/core/types/double>, temperatures : (std/core/list :: V -> V)<std/core/types/double>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> ((std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>);
// monadic lift
private fun .mlift1959-pre_process_data : (maybe_temperatures : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, uncertainties : (std/core/list :: V -> V)<std/core/types/double>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> ((std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>);
// monadic lift
private fun .mlift1960-pre_process_data : (temperatures1 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, uncertainties1 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, uncertainties2 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, temperatures2 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X),(std/core/types/div :: X)> ((std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>);
// monadic lift
private fun .mlift1961-pre_process_data : (temperatures1 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, uncertainties1 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, uncertainties2 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> ((std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>);
// monadic lift
private fun .mlift1962-pre_process_data : (uncertainties1 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, uncertainties2 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, temperatures1 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X),(std/core/types/div :: X)> ((std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>);
// monadic lift
private fun .mlift1963-pre_process_data : (uncertainties1 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, uncertainties2 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> ((std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>);
// monadic lift
private fun .mlift1964-pre_process_data : (uncertainties1 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, uncertainties2 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X),(std/core/types/div :: X)> ((std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>);
// monadic lift
private fun .mlift1965-pre_process_data : (uncertainties1 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> ((std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>);
// monadic lift
private fun .mlift1966-pre_process_data : (uncertainties1 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X),(std/core/types/div :: X)> ((std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>);
// monadic lift
private fun .mlift1967-pre_process_data : (std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> ((std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>>);
public fun pre_process_data : () -> <(std/core/pure :: E),(std/core/fsys :: X)> ((std/core/list :: V -> V)<(std/core/list :: V -> V)<effects-and-types/row_vector>>, (std/core/list :: V -> V)<(std/core/list :: V -> V)<effects-and-types/row_vector>>);
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
fun get_thunk // inline size: 1
  = fn(index: std/core/types/int){
    fn(list: (std/core/list :: V -> V)<std/core/types/double>){
      std/core/([].2)<std/core/types/double>(list, index);
    };
  };
recursive fun remove_maybes // inline size: 10
  = fn<<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>>>(list: (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>, return_list: (std/core/list :: V -> V)<std/core/types/double>){
    match (list) {
      ((std/core/Nil() : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>> ) as .pat: ((std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>))
         -> return_list;
      ((.skip std/core/Cons((x: (std/core/types/maybe :: V -> V)<std/core/types/double>) : (std/core/types/maybe :: V -> V)<std/core/types/double>, (y: (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>) : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>) : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>> ) as .pat0: ((std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>))
         -> (match (x) {
          ((std/core/types/Nothing() : (std/core/types/maybe :: V -> V)<std/core/types/double> ) as .pat1: ((std/core/types/maybe :: V -> V)<std/core/types/double>))
             -> val exn.21561 : std/core/exception
                  = std/core/Exception("Preprocessing error: There are nothings! Please check the input file!", (match ((std/core/types/None<std/core/exception-info>)) {
                      ((std/core/types/Optional((.info.14279: std/core/exception-info) : std/core/exception-info) : (std/core/types/optional :: V -> V)<std/core/exception-info> ) as .pat4: ((std/core/types/optional :: V -> V)<std/core/exception-info>))
                         -> .info.14279;
                      ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/exception-info> ) as .pat00: ((std/core/types/optional :: V -> V)<std/core/exception-info>))
                         -> std/core/ExnError;
                    }));
                val ev.21562 : (std/core/hnd/ev :: ((E, V) -> V) -> V)<(std/core/.hnd-exn :: (E, V) -> V)>
                  = std/core/hnd/.evv-at<(std/core/.hnd-exn :: (E, V) -> V)>((std/core/size_t(0)));
            (match (ev.21562) {
              ((.skip std/core/hnd/Ev<(e :: E),a>((.pat01: (std/core/hnd/htag :: ((E, V) -> V) -> V)<(std/core/.hnd-exn :: (E, V) -> V)>) : (std/core/hnd/htag :: ((E, V) -> V) -> V)<(std/core/.hnd-exn :: (E, V) -> V)>, (m: (std/core/hnd/marker :: (E, V) -> V)<(e :: E),a>) : (std/core/hnd/marker :: (E, V) -> V)<(e :: E),a>, (h: (std/core/.hnd-exn :: (E, V) -> V)<(e :: E),a>) : (std/core/.hnd-exn :: (E, V) -> V)<(e :: E),a>, (.pat10: std/core/hnd/cfc) : std/core/hnd/cfc, (.pat20: (std/core/hnd/evv :: E -> V)<(e :: E)>) : (std/core/hnd/evv :: E -> V)<(e :: E)>) : (std/core/hnd/ev :: ((E, V) -> V) -> V)<(std/core/.hnd-exn :: (E, V) -> V)> ) as .pat2: ((std/core/hnd/ev :: ((E, V) -> V) -> V)<(std/core/.hnd-exn :: (E, V) -> V)>))
                 -> (match ((match (h) {
                  ((.skip std/core/.Hnd-exn((except-throw-exn: (forall<b> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/exception,b,(std/core/.hnd-exn :: (E, V) -> V),(e :: E),a>)) : (forall<b> (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/exception,b,(std/core/.hnd-exn :: (E, V) -> V),(e :: E),a>)) : (std/core/.hnd-exn :: (E, V) -> V)<(e :: E),a> ) as .pat3: ((std/core/.hnd-exn :: (E, V) -> V)<(e :: E),a>))
                     -> except-throw-exn<(std/core/list :: V -> V)<std/core/types/double>>;
                })) {
                  ((.skip std/core/hnd/Clause1((f: ((std/core/hnd/marker :: (E, V) -> V)<(e :: E),a>, (std/core/hnd/ev :: ((E, V) -> V) -> V)<(std/core/.hnd-exn :: (E, V) -> V)>, std/core/exception) -> (e :: E) (std/core/list :: V -> V)<std/core/types/double>) : ((std/core/hnd/marker :: (E, V) -> V)<(e :: E),a>, (std/core/hnd/ev :: ((E, V) -> V) -> V)<(std/core/.hnd-exn :: (E, V) -> V)>, std/core/exception) -> (e :: E) (std/core/list :: V -> V)<std/core/types/double>) : (std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/exception,(std/core/list :: V -> V)<std/core/types/double>,(std/core/.hnd-exn :: (E, V) -> V),(e :: E),a> ) as .pat30: ((std/core/hnd/clause1 :: (V, V, (E, V) -> V, E, V) -> V)<std/core/exception,(std/core/list :: V -> V)<std/core/types/double>,(std/core/.hnd-exn :: (E, V) -> V),(e :: E),a>))
                     -> f(m, ev.21562, exn.21561);
                });
            });
          ((.skip std/core/types/Just((a: std/core/types/double) : std/core/types/double) : (std/core/types/maybe :: V -> V)<std/core/types/double> ) as .pat21: ((std/core/types/maybe :: V -> V)<std/core/types/double>))
             -> data/preprocessing/remove_maybes(y, val ys.1990 : ((std/core/list :: V -> V)<std/core/types/double>)
                                                          = (std/core/Cons<std/core/types/double>(a, (std/core/Nil<std/core/types/double>)));
              (std/core/append<std/core/types/double>(return_list, ys.1990)));
        });
    };
  };
fun by_month // inline size: 7
  = fn<<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>>>(months: (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>, index: std/core/types/int){
    val x.1991 : (std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>
          = std/core/map.5<(std/core/list :: V -> V)<std/core/types/double>,(std/core/types/maybe :: V -> V)<std/core/types/double>,<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>>>(months, val .x0.1931 : ((list : (std/core/list :: V -> V)<std/core/types/double>) -> (std/core/types/maybe :: V -> V)<std/core/types/double>)
                                                                                                                                                                                                               = (std/core/hnd/.open-none1<std/core/types/int,(list : (std/core/list :: V -> V)<std/core/types/double>) -> (std/core/types/maybe :: V -> V)<std/core/types/double>,(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>>>(data/preprocessing/get_thunk, index));
            (fn(.x1: (std/core/list :: V -> V)<std/core/types/double>){
              (std/core/hnd/.open-none1<(std/core/list :: V -> V)<std/core/types/double>,(std/core/types/maybe :: V -> V)<std/core/types/double>,(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>>>(.x0.1931, .x1));
            }));
    match ((std/core/hnd/yielding())) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/hnd/yield-extend<(std/core/list :: V -> V)<(std/core/types/maybe :: V -> V)<std/core/types/double>>,(std/core/list :: V -> V)<std/core/types/double>,<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>>>(data/preprocessing/.mlift1949-by_month);
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> data/preprocessing/remove_maybes(x.1991, (std/core/Nil<std/core/types/double>));
    };
  };
recursive fun list_of_lists // inline size: 8
  = fn<<(std/core/types/div :: X)>>(list: (std/core/list :: V -> V)<std/core/types/double>, length: std/core/types/int){
    match ((std/core/(==.1)(length, 0))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/Cons<(std/core/list :: V -> V)<std/core/types/double>>(list, (std/core/Nil<(std/core/list :: V -> V)<std/core/types/double>>));
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> (match (list) {
          ((std/core/Nil() : (std/core/list :: V -> V)<std/core/types/double> ) as .pat1: ((std/core/list :: V -> V)<std/core/types/double>))
             -> std/core/Nil<(std/core/list :: V -> V)<std/core/types/double>>;
          ((.skip std/core/Cons((.pat3: std/core/types/double) : std/core/types/double, (.pat4: (std/core/list :: V -> V)<std/core/types/double>) : (std/core/list :: V -> V)<std/core/types/double>) : (std/core/list :: V -> V)<std/core/types/double> ) as .pat2: ((std/core/list :: V -> V)<std/core/types/double>))
             -> val list_split : ((std/core/list :: V -> V)<std/core/types/double>, (std/core/list :: V -> V)<std/core/types/double>)
                  = std/core/split<std/core/types/double>(list, length);
                val xs.1995 : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>
                  = std/core/Cons<(std/core/list :: V -> V)<std/core/types/double>>((match (list_split) {
                      ((.skip std/core/types/(,)((.x: (std/core/list :: V -> V)<std/core/types/double>) : (std/core/list :: V -> V)<std/core/types/double>, (.pat00: (std/core/list :: V -> V)<std/core/types/double>) : (std/core/list :: V -> V)<std/core/types/double>) : ((std/core/list :: V -> V)<std/core/types/double>, (std/core/list :: V -> V)<std/core/types/double>) ) as .pat5: ((std/core/list :: V -> V)<std/core/types/double>, (std/core/list :: V -> V)<std/core/types/double>))
                         -> .x;
                    }), (std/core/Nil<(std/core/list :: V -> V)<std/core/types/double>>));
                val ys.1996 : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>
                  = data/preprocessing/list_of_lists((match (list_split) {
                      ((.skip std/core/types/(,)((.pat01: (std/core/list :: V -> V)<std/core/types/double>) : (std/core/list :: V -> V)<std/core/types/double>, (.x0: (std/core/list :: V -> V)<std/core/types/double>) : (std/core/list :: V -> V)<std/core/types/double>) : ((std/core/list :: V -> V)<std/core/types/double>, (std/core/list :: V -> V)<std/core/types/double>) ) as .pat6: ((std/core/list :: V -> V)<std/core/types/double>, (std/core/list :: V -> V)<std/core/types/double>))
                         -> .x0;
                    }), length);
            std/core/append<(std/core/list :: V -> V)<std/core/types/double>>(xs.1995, ys.1996);
        });
    };
  };
fun list_of_lists_thunk // inline size: 1
  = forall<(e :: E)> fn(length: std/core/types/int){
    fn<<(std/core/types/div :: E)|(e :: E)>>(list: (std/core/list :: V -> V)<std/core/types/double>){
      data/preprocessing/list_of_lists(list, length);
    };
  };
fun convert_to_groups // inline size: 2
  = fn<<(std/core/types/div :: X)>>(months: (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>, group_size: std/core/types/int){
    std/core/map.5<(std/core/list :: V -> V)<std/core/types/double>,(std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>,<(std/core/types/div :: E)>>(months, (data/preprocessing/list_of_lists_thunk<(std/core/types/(<>) :: E)>(group_size)));
  };
recursive fun length_months // inline size: 5
  = fn(months: (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>){
    match (months) {
      ((std/core/Nil() : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>> ) as .pat: ((std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>))
         -> std/core/Nil<std/core/types/int>;
      ((.skip std/core/Cons((x: (std/core/list :: V -> V)<std/core/types/double>) : (std/core/list :: V -> V)<std/core/types/double>, (y: (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>) : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>) : (std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>> ) as .pat0: ((std/core/list :: V -> V)<(std/core/list :: V -> V)<std/core/types/double>>))
         -> val xs.1999 : (std/core/list :: V -> V)<std/core/types/int>
              = std/core/Cons<std/core/types/int>((std/core/length.1<std/core/types/double>(x)), (std/core/Nil<std/core/types/int>));
            val ys.2000 : (std/core/list :: V -> V)<std/core/types/int>
              = data/preprocessing/length_months(y);
        std/core/append<std/core/types/int>(xs.1999, ys.2000);
    };
  };