module interface bug-test4
 
//------------------------------
//#kki: import declarations
 
private import std/core/types = std/core/types = "";
private import std/core/hnd = std/core/hnd = "";
private import std/core = std/core = "";
private import std/num/random = std/num/random = "";
private import effects-and-types = effects-and-types = "";
private import handlers = handlers = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
//////////////////// In Development:
local alias effects-and-types/histogram_rmsmc<a> :: V -> V = (std/core/list :: V -> V)<((effects-and-types/trace_values == 1 (std/core/list :: V -> V)<std/core/types/double>), effects-and-types/exp, a)> = 2;
local alias effects-and-types/trace_values = (std/core/list :: V -> V)<std/core/types/double> = 1;
// An alias for pure effects: a pure function always returns the same result
// when called with the same arguments but may not terminate or raise an exception.
local alias std/core/pure :: E = <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/div :: X)> = 1;
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
public fun x : forall<a,(e :: E)> (comp : () -> (e :: E) a) -> (e :: E) a;
public fun rmsmc_loop : forall<a> (a : std/core/types/int, composition_1 : std/core/types/int, i : std/core/types/int, smc_step_num : std/core/types/int, mh_step_num : std/core/types/int, step_size : std/core/types/int, normalize : std/core/types/bool) -> <(std/core/pure :: E),(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>> (effects-and-types/histogram_rmsmc :: V -> V)<a>;
// monadic lift
private fun .mlift178-rmsmc : forall<a,_b,(e :: E)> (model : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>,(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/handled :: HX -> X)<(std/num/random/random :: HX)>|(e :: E)> a, wild_ : (effects-and-types/histogram_rmsmc :: V -> V)<_b>) -> <(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>,(std/core/types/handled :: HX -> X)<(std/num/random/random :: HX)>|(e :: E)> ((a : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>,(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/handled :: HX -> X)<(std/num/random/random :: HX)>|(e :: E)> a);
public fun rmsmc : forall<a,(e :: E)> (particle_num : std/core/types/int, smc_step_num : std/core/types/int, mh_step_num : std/core/types/int, step_size : std/core/types/int, model : () -> <(std/core/pure :: E),(std/core/types/handled :: HX -> X)<(std/num/random/random :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a, normalize : std/core/types/bool) -> <(std/core/pure :: E),(std/core/types/handled :: HX -> X)<(std/num/random/random :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>|(e :: E)> ((a : std/core/types/int) -> <(std/core/pure :: E),(std/core/types/handled :: HX -> X)<(std/num/random/random :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a);
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
fun x // inline size: 1
  = forall<a,(e :: E)> fn<(e :: E)>(comp: () -> (e :: E) a){
    comp();
  };
recursive fun rmsmc_loop // inline size: 5
  = forall<a> fn<<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/div :: E)>>(a: std/core/types/int, composition_1: std/core/types/int, i: std/core/types/int, smc_step_num: std/core/types/int, mh_step_num: std/core/types/int, step_size: std/core/types/int, normalize: std/core/types/bool){
    (match (normalize) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> bug-test4/rmsmc_loop<a,<(std/core/types/div :: E)>>(a, composition_1, (std/core/(+)(i, 1)), smc_step_num, mh_step_num, step_size, normalize);
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> bug-test4/rmsmc_loop<a,<(std/core/types/div :: E)>>(a, composition_1, (std/core/(+)(i, 1)), smc_step_num, mh_step_num, step_size, normalize);
    });
  };