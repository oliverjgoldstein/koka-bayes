/* Time durations in SI seconds.

   Durations use SI seconds.
*/
module interface std/time/duration
 
//------------------------------
//#kki: import declarations
 
private import std/core/types = std/core/types = "";
private import std/core = std/core = "";
private import std/num/ddouble = std/num/ddouble = "";
private import std/time/timestamp = std/time/timestamp = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
// Time spans are a time duration in some time scale represented as a `:ddouble`;
// this gives it very high precision and range to represent time very precisely.
// (see the [`instant`](std_time_instant.html) module)
local alias std/time/timestamp/timespan = std/num/ddouble/ddouble = 1;
 
//------------------------------
//#kki: type declarations
 
// A duration in time in (TAI) SI seconds (as measured on the earth's geoid).\
// A duration is represented by a `:ddouble` giving it a high range and precision (see the [`instant`](std_time_instant.html) module)
public value{16,0} type duration {
  // A duration in time in (TAI) SI seconds (as measured on the earth's geoid).\
// A duration is represented by a `:ddouble` giving it a high range and precision (see the [`instant`](std_time_instant.html) module)
  private con Duration(secs: (std/time/timestamp/timespan == 1 std/num/ddouble/ddouble)) : (secs : (std/time/timestamp/timespan == 1 std/num/ddouble/ddouble)) -> duration;
};
 
//------------------------------
//#kki: declarations
 
// Automatically generated. Retrieves the `secs` constructor field of the `:duration` type.
private fun secs : (duration : duration) -> std/time/timestamp/timespan;
public fun .copy : (duration, secs : (std/core/types/optional :: V -> V)<std/time/timestamp/timespan>) -> duration;
// Compare two `:duration`s.
public fun compare : (i : duration, j : duration) -> std/core/types/order;
public fun (!=) : (i : duration, j : duration) -> std/core/types/bool;
// Convert a `:timespan` to a `:duration`. Be careful to only use
// use this on timespan's that are in TAI SI seconds!
public fun duration : (t : std/time/timestamp/timespan) -> duration;
// Create a duration from whole seconds `secs` and a fraction of seconds `frac`.
public fun duration.1 : (secs : std/core/types/int, frac : (std/core/types/optional :: V -> V)<std/core/types/double>) -> duration;
// Create a duration from seconds as a `:double`.
public fun duration.2 : (secs : std/core/types/double) -> duration;
// Return the duration in SI seconds.
public fun seconds : (d : duration) -> std/time/timestamp/timespan;
// Create a `:duration` of `n` seconds.
public fun seconds.1 : (n : std/core/types/int) -> duration;
// Convert a duration to a `:timespan`.
public fun timespan : (d : duration) -> std/time/timestamp/timespan;
// Add two durations.
public fun (+) : (d : duration, e : duration) -> duration;
// Negate a duration.
public fun (~) : (d : duration) -> duration;
// Subtract a duration from a duration.
public fun (-) : (d : duration, e : duration) -> duration;
public fun (==) : (i : duration, j : duration) -> std/core/types/bool;
public fun (<) : (i : duration, j : duration) -> std/core/types/bool;
public fun (<=) : (i : duration, j : duration) -> std/core/types/bool;
public fun (>) : (i : duration, j : duration) -> std/core/types/bool;
public fun (>=) : (i : duration, j : duration) -> std/core/types/bool;
// Create a `:duration` of `n` "days" (assuming 86400s in a day).
public fun days : (n : std/core/types/int) -> duration;
public val duration0 : duration;
// The fractional seconds of a duration as a `:double`.
// `d.seconds == d.truncate.fixed + d.fraction.fixed
public fun fraction : (d : duration) -> std/core/types/double;
// Create a `:duration` of `n` hours.
public fun hours : (n : std/core/types/int) -> duration;
// Is this a negative duration?
public fun is-neg : (d : duration) -> std/core/types/bool;
// Is this a positive duration?
public fun is-pos : (d : duration) -> std/core/types/bool;
// Is this a zero duration?
public fun is-zero : (d : duration) -> std/core/types/bool;
// The maximum of two durations.
public fun max : (i : duration, j : duration) -> duration;
// Return the duration in rounded SI milli-seconds.
public fun milli-seconds : (d : duration) -> std/core/types/int;
// Create a `:duration` of `n` milli-seconds.
public fun milli-seconds.1 : (n : std/core/types/int) -> duration;
// The minimum of two durations.
public fun min : (i : duration, j : duration) -> duration;
// Create a `:duration` of `n` minutes.
public fun minutes : (n : std/core/types/int) -> duration;
// Return the duration in rounded SI nano-seconds.
public fun nano-seconds : (d : duration) -> std/core/types/int;
// Show a duration in SI seconds.
public fun show : (d : duration, max-prec : (std/core/types/optional :: V -> V)<std/core/types/int>) -> std/core/types/string;
// Convert a duration to a `:timespan`.
public fun timestamp : (d : duration) -> std/time/timestamp/timestamp;
// The whole seconds (in some time unit) of the duration as `:int``. Rounds towards zero.
public fun truncate : (d : duration) -> std/core/types/int;
// Convert a `:timestamp` to a `:duration`. Be careful to only use
// use this on timestamp's that are in TAI SI seconds and do not
// contain leap seconds!
public fun unsafe-duration : (t : std/time/timestamp/timestamp) -> duration;
// Create a `:duration` of `n` "weeks" (assuming 7 days of 86400s).
public fun weeks : (n : std/core/types/int) -> duration;
// Create a `:duration` of `n` "years" (assuming 365 days of 86400s).
public fun years : (n : std/core/types/int) -> duration;
// A zero duration.
public val zero : duration;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
inline fun secs // inline size: 0
  = fn(duration: duration){
    match (duration) {
      ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat0: std/core/types/double) : std/core/types/double, (.pat1: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat: duration)
         -> .x;
    };
  };
fun .copy // inline size: 2
  = fn(.this: duration, secs: (std/core/types/optional :: V -> V)<std/time/timestamp/timespan>){
    std/time/duration/Duration((match (secs) {
      ((std/core/types/Optional((.secs.60: std/time/timestamp/timespan) : std/time/timestamp/timespan) : (std/core/types/optional :: V -> V)<std/time/timestamp/timespan> ) as .pat: ((std/core/types/optional :: V -> V)<std/time/timestamp/timespan>))
         -> .secs.60;
      ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/time/timestamp/timespan> ) as .pat0: ((std/core/types/optional :: V -> V)<std/time/timestamp/timespan>))
         -> (match (.this) {
          ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat00: std/core/types/double) : std/core/types/double, (.pat10: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat1: duration)
             -> .x;
        });
    }));
  };
fun compare // inline size: 9
  = fn(i: duration, j: duration){
    match ((match ((std/core/(<.4)((match ((match (i) {
        ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat05: std/core/types/double) : std/core/types/double, (.pat11: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x3: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat9: duration)
           -> .x3;
      })) {
        ((.skip std/num/ddouble/Ddouble((.x: std/core/types/double) : std/core/types/double, (.pat00: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .pat3: std/num/ddouble/ddouble)
           -> .x;
      }), (match ((match (j) {
        ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat06: std/core/types/double) : std/core/types/double, (.pat13: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x4: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat12: duration)
           -> .x4;
      })) {
        ((.skip std/num/ddouble/Ddouble((.x0: std/core/types/double) : std/core/types/double, (.pat01: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .pat4: std/num/ddouble/ddouble)
           -> .x0;
      })))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/types/Lt;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> (match ((std/core/(>.2)((match ((match (i) {
            ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat05: std/core/types/double) : std/core/types/double, (.pat11: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x3: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat9: duration)
               -> .x3;
          })) {
            ((.skip std/num/ddouble/Ddouble((.x1: std/core/types/double) : std/core/types/double, (.pat000: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .pat30: std/num/ddouble/ddouble)
               -> .x1;
          }), (match ((match (j) {
            ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat06: std/core/types/double) : std/core/types/double, (.pat13: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x4: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat12: duration)
               -> .x4;
          })) {
            ((.skip std/num/ddouble/Ddouble((.x00: std/core/types/double) : std/core/types/double, (.pat010: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .pat40: std/num/ddouble/ddouble)
               -> .x00;
          })))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
             -> std/core/types/Gt;
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
             -> std/core/types/Eq;
        });
    })) {
      ((std/core/types/Eq() : std/core/types/order ) as .pat5: std/core/types/order)
         -> (match ((std/core/(<.4)((match ((match (i) {
            ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat05: std/core/types/double) : std/core/types/double, (.pat11: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x3: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat9: duration)
               -> .x3;
          })) {
            ((.skip std/num/ddouble/Ddouble((.pat03: std/core/types/double) : std/core/types/double, (.x10: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .pat7: std/num/ddouble/ddouble)
               -> .x10;
          }), (match ((match (j) {
            ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat06: std/core/types/double) : std/core/types/double, (.pat13: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x4: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat12: duration)
               -> .x4;
          })) {
            ((.skip std/num/ddouble/Ddouble((.pat04: std/core/types/double) : std/core/types/double, (.x2: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .pat8: std/num/ddouble/ddouble)
               -> .x2;
          })))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat6: std/core/types/bool)
             -> std/core/types/Lt;
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat02: std/core/types/bool)
             -> (match ((std/core/(>.2)((match ((match (i) {
                ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat05: std/core/types/double) : std/core/types/double, (.pat11: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x3: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat9: duration)
                   -> .x3;
              })) {
                ((.skip std/num/ddouble/Ddouble((.pat030: std/core/types/double) : std/core/types/double, (.x11: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .pat70: std/num/ddouble/ddouble)
                   -> .x11;
              }), (match ((match (j) {
                ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat06: std/core/types/double) : std/core/types/double, (.pat13: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x4: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat12: duration)
                   -> .x4;
              })) {
                ((.skip std/num/ddouble/Ddouble((.pat040: std/core/types/double) : std/core/types/double, (.x20: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .pat80: std/num/ddouble/ddouble)
                   -> .x20;
              })))) {
              ((std/core/types/True() : std/core/types/bool ) as .pat10: std/core/types/bool)
                 -> std/core/types/Gt;
              ((.skip std/core/types/False() : std/core/types/bool ) as .pat20: std/core/types/bool)
                 -> std/core/types/Eq;
            });
        });
      (ord: std/core/types/order)
         -> ord;
    };
  };
fun (!=) // inline size: 6
  = fn(i: duration, j: duration){
    val x.2262 : std/core/types/order
          = std/time/duration/compare(i, j);
    std/core/(!=.1)((std/core/int.5(x.2262)), (match (std/core/types/Eq) {
        ((std/core/types/Lt() : std/core/types/order ) as .pat: std/core/types/order)
           -> std/core/(-)(0, 1);
        ((std/core/types/Eq() : std/core/types/order ) as .pat0: std/core/types/order)
           -> 0;
        ((.skip std/core/types/Gt() : std/core/types/order ) as .pat1: std/core/types/order)
           -> 1;
      }));
  };
fun duration // inline size: 1
  = fn(t: std/time/timestamp/timespan){
    std/time/duration/Duration(t);
  };
fun duration.2 // inline size: 2
  = fn(secs: std/core/types/double){
    std/time/duration/Duration((std/time/timestamp/timespan.1(secs)));
  };
inline fun seconds // inline size: 0
  = fn(d: duration){
    match (d) {
      ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat0: std/core/types/double) : std/core/types/double, (.pat1: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat: duration)
         -> .x;
    };
  };
inline fun timespan // inline size: 0
  = fn(d: duration){
    match (d) {
      ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat0: std/core/types/double) : std/core/types/double, (.pat1: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat: duration)
         -> .x;
    };
  };
fun (+) // inline size: 2
  = fn(d: duration, e: duration){
    std/time/duration/Duration((std/num/ddouble/(+)((match (d) {
        ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat0: std/core/types/double) : std/core/types/double, (.pat1: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat: duration)
           -> .x;
      }), (match (e) {
        ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat00: std/core/types/double) : std/core/types/double, (.pat10: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x0: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat2: duration)
           -> .x0;
      }))));
  };
fun (~) // inline size: 4
  = fn(d: duration){
    std/time/duration/Duration((std/num/ddouble/Ddouble((std/core/(~.1)((match ((match (d) {
        ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat01: std/core/types/double) : std/core/types/double, (.pat10: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x1: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat2: duration)
           -> .x1;
      })) {
        ((.skip std/num/ddouble/Ddouble((.x: std/core/types/double) : std/core/types/double, (.pat0: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .pat: std/num/ddouble/ddouble)
           -> .x;
      }))), (std/core/(~.1)((match ((match (d) {
        ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat01: std/core/types/double) : std/core/types/double, (.pat10: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x1: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat2: duration)
           -> .x1;
      })) {
        ((.skip std/num/ddouble/Ddouble((.pat00: std/core/types/double) : std/core/types/double, (.x0: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .pat1: std/num/ddouble/ddouble)
           -> .x0;
      }))))));
  };
fun (-) // inline size: 3
  = fn(d: duration, e: duration){
    val e0.2276 : duration
          = std/time/duration/(~)(e);
    std/time/duration/Duration((std/num/ddouble/(+)((match (d) {
        ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat0: std/core/types/double) : std/core/types/double, (.pat1: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat: duration)
           -> .x;
      }), (match (e0.2276) {
        ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat00: std/core/types/double) : std/core/types/double, (.pat10: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x0: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat2: duration)
           -> .x0;
      }))));
  };
fun (==) // inline size: 6
  = fn(i: duration, j: duration){
    val x.2279 : std/core/types/order
          = std/time/duration/compare(i, j);
    std/core/(==.1)((std/core/int.5(x.2279)), (match (std/core/types/Eq) {
        ((std/core/types/Lt() : std/core/types/order ) as .pat: std/core/types/order)
           -> std/core/(-)(0, 1);
        ((std/core/types/Eq() : std/core/types/order ) as .pat0: std/core/types/order)
           -> 0;
        ((.skip std/core/types/Gt() : std/core/types/order ) as .pat1: std/core/types/order)
           -> 1;
      }));
  };
fun (<) // inline size: 6
  = fn(i: duration, j: duration){
    val x.2281 : std/core/types/order
          = std/time/duration/compare(i, j);
    std/core/(==.1)((std/core/int.5(x.2281)), (match (std/core/types/Lt) {
        ((std/core/types/Lt() : std/core/types/order ) as .pat: std/core/types/order)
           -> std/core/(-)(0, 1);
        ((std/core/types/Eq() : std/core/types/order ) as .pat0: std/core/types/order)
           -> 0;
        ((.skip std/core/types/Gt() : std/core/types/order ) as .pat1: std/core/types/order)
           -> 1;
      }));
  };
fun (<=) // inline size: 6
  = fn(i: duration, j: duration){
    val x.2283 : std/core/types/order
          = std/time/duration/compare(i, j);
    std/core/(!=.1)((std/core/int.5(x.2283)), (match (std/core/types/Gt) {
        ((std/core/types/Lt() : std/core/types/order ) as .pat: std/core/types/order)
           -> std/core/(-)(0, 1);
        ((std/core/types/Eq() : std/core/types/order ) as .pat0: std/core/types/order)
           -> 0;
        ((.skip std/core/types/Gt() : std/core/types/order ) as .pat1: std/core/types/order)
           -> 1;
      }));
  };
fun (>) // inline size: 6
  = fn(i: duration, j: duration){
    val x.2285 : std/core/types/order
          = std/time/duration/compare(i, j);
    std/core/(==.1)((std/core/int.5(x.2285)), (match (std/core/types/Gt) {
        ((std/core/types/Lt() : std/core/types/order ) as .pat: std/core/types/order)
           -> std/core/(-)(0, 1);
        ((std/core/types/Eq() : std/core/types/order ) as .pat0: std/core/types/order)
           -> 0;
        ((.skip std/core/types/Gt() : std/core/types/order ) as .pat1: std/core/types/order)
           -> 1;
      }));
  };
fun (>=) // inline size: 6
  = fn(i: duration, j: duration){
    val x.2287 : std/core/types/order
          = std/time/duration/compare(i, j);
    std/core/(!=.1)((std/core/int.5(x.2287)), (match (std/core/types/Lt) {
        ((std/core/types/Lt() : std/core/types/order ) as .pat: std/core/types/order)
           -> std/core/(-)(0, 1);
        ((std/core/types/Eq() : std/core/types/order ) as .pat0: std/core/types/order)
           -> 0;
        ((.skip std/core/types/Gt() : std/core/types/order ) as .pat1: std/core/types/order)
           -> 1;
      }));
  };
fun fraction // inline size: 3
  = fn(d: duration){
    val x.2293 : std/num/ddouble/ddouble
          = val y.21009 : std/num/ddouble/ddouble
                  = std/num/ddouble/truncate((match (d) {
                    ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat00: std/core/types/double) : std/core/types/double, (.pat10: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x0: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat1: duration)
                       -> .x0;
                  }));
          std/num/ddouble/(+)((match (d) {
              ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat00: std/core/types/double) : std/core/types/double, (.pat10: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x0: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat1: duration)
                 -> .x0;
            }), (std/num/ddouble/(~)(y.21009)));
    match (x.2293) {
      ((.skip std/num/ddouble/Ddouble((.x: std/core/types/double) : std/core/types/double, (.pat0: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .pat: std/num/ddouble/ddouble)
         -> .x;
    };
  };
fun is-neg // inline size: 1
  = fn(d: duration){
    std/core/(<.4)((match ((match (d) {
        ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat00: std/core/types/double) : std/core/types/double, (.pat10: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x0: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat1: duration)
           -> .x0;
      })) {
        ((.skip std/num/ddouble/Ddouble((.x: std/core/types/double) : std/core/types/double, (.pat0: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .pat: std/num/ddouble/ddouble)
           -> .x;
      }), 0.0);
  };
fun is-pos // inline size: 1
  = fn(d: duration){
    std/core/(>.2)((match ((match (d) {
        ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat00: std/core/types/double) : std/core/types/double, (.pat10: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x0: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat1: duration)
           -> .x0;
      })) {
        ((.skip std/num/ddouble/Ddouble((.x: std/core/types/double) : std/core/types/double, (.pat0: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .pat: std/num/ddouble/ddouble)
           -> .x;
      }), 0.0);
  };
fun is-zero // inline size: 1
  = fn(d: duration){
    std/core/(==.2)((match ((match (d) {
        ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat00: std/core/types/double) : std/core/types/double, (.pat10: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x0: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat1: duration)
           -> .x0;
      })) {
        ((.skip std/num/ddouble/Ddouble((.x: std/core/types/double) : std/core/types/double, (.pat0: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .pat: std/num/ddouble/ddouble)
           -> .x;
      }), 0.0);
  };
fun max // inline size: 2
  = fn(i: duration, j: duration){
    match ((std/time/duration/(>=)(i, j))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> i;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> j;
    };
  };
fun milli-seconds // inline size: 10
  = fn(d: duration){
    std/num/ddouble/int((std/num/ddouble/(*)((match (d) {
          ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat0: std/core/types/double) : std/core/types/double, (.pat1: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat: duration)
             -> .x;
        }), (match ((std/core/(==.2)((match ((std/core/types/None<std/core/types/double>)) {
            ((std/core/types/Optional((.frac.1424: std/core/types/double) : std/core/types/double) : (std/core/types/optional :: V -> V)<std/core/types/double> ) as .pat2: ((std/core/types/optional :: V -> V)<std/core/types/double>))
               -> .frac.1424;
            ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/double> ) as .pat00: ((std/core/types/optional :: V -> V)<std/core/types/double>))
               -> 0.0;
          }), 0.0))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat10: std/core/types/bool)
             -> std/num/ddouble/ddouble.1(1000);
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat20: std/core/types/bool)
             -> std/num/ddouble/(+)((std/num/ddouble/ddouble.1(1000)), (std/num/ddouble/Ddouble((match ((std/core/types/None<std/core/types/double>)) {
                  ((std/core/types/Optional((.frac.14240: std/core/types/double) : std/core/types/double) : (std/core/types/optional :: V -> V)<std/core/types/double> ) as .pat3: ((std/core/types/optional :: V -> V)<std/core/types/double>))
                     -> .frac.14240;
                  ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/double> ) as .pat000: ((std/core/types/optional :: V -> V)<std/core/types/double>))
                     -> 0.0;
                }), 0.0)));
        }))), (std/core/types/None<std/core/types/int>));
  };
fun min // inline size: 2
  = fn(i: duration, j: duration){
    match ((std/time/duration/(<=)(i, j))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> i;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> j;
    };
  };
fun nano-seconds // inline size: 10
  = fn(d: duration){
    std/num/ddouble/int((std/num/ddouble/(*)((match (d) {
          ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat0: std/core/types/double) : std/core/types/double, (.pat1: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat: duration)
             -> .x;
        }), (match ((std/core/(==.2)((match ((std/core/types/None<std/core/types/double>)) {
            ((std/core/types/Optional((.frac.1424: std/core/types/double) : std/core/types/double) : (std/core/types/optional :: V -> V)<std/core/types/double> ) as .pat2: ((std/core/types/optional :: V -> V)<std/core/types/double>))
               -> .frac.1424;
            ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/double> ) as .pat00: ((std/core/types/optional :: V -> V)<std/core/types/double>))
               -> 0.0;
          }), 0.0))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat10: std/core/types/bool)
             -> std/num/ddouble/ddouble.1(1000000000);
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat20: std/core/types/bool)
             -> std/num/ddouble/(+)((std/num/ddouble/ddouble.1(1000000000)), (std/num/ddouble/Ddouble((match ((std/core/types/None<std/core/types/double>)) {
                  ((std/core/types/Optional((.frac.14240: std/core/types/double) : std/core/types/double) : (std/core/types/optional :: V -> V)<std/core/types/double> ) as .pat3: ((std/core/types/optional :: V -> V)<std/core/types/double>))
                     -> .frac.14240;
                  ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/double> ) as .pat000: ((std/core/types/optional :: V -> V)<std/core/types/double>))
                     -> 0.0;
                }), 0.0)));
        }))), (std/core/types/None<std/core/types/int>));
  };
fun show // inline size: 6
  = fn(d: duration, max-prec: (std/core/types/optional :: V -> V)<std/core/types/int>){
    std/core/(++.1)((std/num/ddouble/show-fixed((match (d) {
          ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat0: std/core/types/double) : std/core/types/double, (.pat1: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat: duration)
             -> .x;
        }), (std/core/types/Optional<std/core/types/int>((std/core/(~)((std/core/abs((match (max-prec) {
          ((std/core/types/Optional((.max-prec.1769: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat2: ((std/core/types/optional :: V -> V)<std/core/types/int>))
             -> .max-prec.1769;
          ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat00: ((std/core/types/optional :: V -> V)<std/core/types/int>))
             -> 9;
        }))))))))), "s");
  };
fun timestamp // inline size: 3
  = fn(d: duration){
    std/time/timestamp/Timestamp((match (d) {
        ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat0: std/core/types/double) : std/core/types/double, (.pat1: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat: duration)
           -> .x;
      }), (std/core/int32((match ((std/core/types/None<std/core/types/int>)) {
        ((std/core/types/Optional((.leap.492: std/core/types/int) : std/core/types/int) : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat2: ((std/core/types/optional :: V -> V)<std/core/types/int>))
           -> .leap.492;
        ((.skip std/core/types/None() : (std/core/types/optional :: V -> V)<std/core/types/int> ) as .pat00: ((std/core/types/optional :: V -> V)<std/core/types/int>))
           -> 0;
      }))));
  };
fun truncate // inline size: 5
  = fn(d: duration){
    std/num/ddouble/int((match ((std/num/ddouble/is-neg((match (d) {
        ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat00: std/core/types/double) : std/core/types/double, (.pat10: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat1: duration)
           -> .x;
      })))) {
        ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
           -> std/num/ddouble/ceiling((match (d) {
            ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat00: std/core/types/double) : std/core/types/double, (.pat10: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat1: duration)
               -> .x;
          }));
        ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
           -> std/num/ddouble/floor((match (d) {
            ((.skip std/time/duration/Duration(((.skip std/num/ddouble/Ddouble((.pat00: std/core/types/double) : std/core/types/double, (.pat10: std/core/types/double) : std/core/types/double) : std/num/ddouble/ddouble ) as .x: std/time/timestamp/timespan) : std/time/timestamp/timespan) : duration ) as .pat1: duration)
               -> .x;
          }));
      }), (std/core/types/None<std/core/types/int>));
  };
fun unsafe-duration // inline size: 2
  = fn(t: std/time/timestamp/timestamp){
    std/time/duration/Duration((std/time/timestamp/unsafe-timespan-withleap(t)));
  };