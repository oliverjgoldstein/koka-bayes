module interface handlers
 
//------------------------------
//#kki: import declarations
 
private import std/core/types = std/core/types = "";
private import std/core/hnd = std/core/hnd = "";
private import std/core = std/core = "";
private import std/num/random = std/num/random = "";
private import effects-and-types = effects-and-types = "";
private import exponents = exponents = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
local alias effects-and-types/trace_values = (std/core/list :: V -> V)<std/core/types/double> = 1;
local alias std/core/hnd/ev-index = std/core/types/size_t = 1;
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
// monadic lift
private fun .mlift2510-advance : forall<a,(e :: E)> (steps : std/core/types/int, (std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
// monadic lift
private fun .mlift2511-advance : forall<a,(e :: E)> (rcontext : (std/core/hnd/resume-context :: (V, E, V) -> V)<(),(e :: E),(std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a>, steps : std/core/types/int, std/core/hnd/ev-index) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
// monadic lift
private fun .mlift2512-advance : forall<a,(e :: E)> ((std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
// monadic lift
private fun .mlift2513-advance : forall<a,(e :: E)> (rcontext : (std/core/hnd/resume-context :: (V, E, V) -> V)<(),(e :: E),(std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a>, std/core/hnd/ev-index) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
// monadic lift
private fun .mlift2514-advance : forall<a,(e :: E)> (rcontext : (std/core/hnd/resume-context :: (V, E, V) -> V)<(),(e :: E),(std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a>, wild_ : ()) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
public fun advance : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a) -> (e :: E) ((steps : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a);
// monadic lift
private fun .mlift2515-advance-fun : forall<a,(e :: E),(h :: H)> (rcontext : (std/core/hnd/resume-context :: (V, E, V) -> V)<(),<(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)>,a>, wild_0 : ()) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> a;
// monadic lift
private fun .mlift2516-advance-fun : forall<a,(e :: E),(h :: H)> (rcontext : (std/core/hnd/resume-context :: (V, E, V) -> V)<(),<(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)>,a>, std/core/types/int) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
// monadic lift
private fun .mlift2517-advance-fun : forall<a,(e :: E),(h :: H)> (count : (std/core/types/local-var :: (H, V) -> V)<(h :: H),std/core/types/int>, rcontext : (std/core/hnd/resume-context :: (V, E, V) -> V)<(),<(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)>,a>, wild_ : ()) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
// monadic lift
private fun .mlift2518-advance-fun : forall<a,(e :: E),(h :: H)> (count : (std/core/types/local-var :: (H, V) -> V)<(h :: H),std/core/types/int>, rcontext : (std/core/hnd/resume-context :: (V, E, V) -> V)<(),<(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)>,a>, std/core/types/int) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
private fun advance-fun : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a, init : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
// monadic lift
private fun .mlift2519-advance-deep : forall<a,(e :: E)> (steps : std/core/types/int, (std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
// monadic lift
private fun .mlift2520-advance-deep : forall<a,(e :: E)> (resume : (()) -> (e :: E) ((std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a), steps : std/core/types/int, std/core/hnd/ev-index) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
// monadic lift
private fun .mlift2521-advance-deep : forall<a,(e :: E)> ((std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
// monadic lift
private fun .mlift2522-advance-deep : forall<a,(e :: E)> (resume : (()) -> (e :: E) ((std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a), std/core/hnd/ev-index) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
// monadic lift
private fun .mlift2523-advance-deep : forall<a,(e :: E)> (resume : (()) -> (e :: E) ((std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a), wild_ : ()) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
public fun advance-deep : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a) -> (e :: E) ((steps : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a);
public fun finalize : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a) -> (e :: E) a;
public fun random_sampler : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/handled :: HX -> X)<(std/num/random/random :: HX)>|(e :: E)> a) -> <(std/core/types/handled :: HX -> X)<(std/num/random/random :: HX)>|(e :: E)> a;
// monadic lift
private fun .mlift2524-recorder : forall<(h :: H),(e :: E)> (rand_choice : std/core/types/double, wild_ : ()) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> std/core/types/double;
// monadic lift
private fun .mlift2525-recorder : forall<(h :: H),(e :: E)> (rand_choice : std/core/types/double, trace : (std/core/types/local-var :: (H, V) -> V)<(h :: H),effects-and-types/trace_values>, effects-and-types/trace_values) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> std/core/types/double;
// monadic lift
private fun .mlift2526-recorder : forall<(h :: H),(e :: E)> (trace : (std/core/types/local-var :: (H, V) -> V)<(h :: H),effects-and-types/trace_values>, rand_choice : std/core/types/double) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> std/core/types/double;
// monadic lift
private fun .mlift2527-recorder : forall<(h :: H),a,b,(e :: E)> (a : a, b : b, effects-and-types/trace_values) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> (effects-and-types/trace_values, a, b);
public fun recorder : forall<a,b,(e :: E)> (model_trace : effects-and-types/trace_values, action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> (a, b)) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> (effects-and-types/trace_values, a, b);
// monadic lift
private fun .mlift2528-replayx : forall<(h :: H),(e :: E)> (rand_choice : std/core/types/double, wild_0 : ()) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> std/core/types/double;
// monadic lift
private fun .mlift2529-replayx : forall<(h :: H),(e :: E)> (extended_trace : (std/core/types/local-var :: (H, V) -> V)<(h :: H),(std/core/list :: V -> V)<std/core/types/double>>, rand_choice : std/core/types/double, (std/core/list :: V -> V)<std/core/types/double>) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> std/core/types/double;
// monadic lift
private fun .mlift2530-replayx : forall<(h :: H),(e :: E)> (extended_trace : (std/core/types/local-var :: (H, V) -> V)<(h :: H),(std/core/list :: V -> V)<std/core/types/double>>, rand_choice : std/core/types/double) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> std/core/types/double;
// monadic lift
private fun .mlift2531-replayx : forall<(h :: H),(e :: E)> ((std/core/list :: V -> V)<std/core/types/double>, extended_trace : (std/core/types/local-var :: (H, V) -> V)<(h :: H),(std/core/list :: V -> V)<std/core/types/double>>, std/core/types/int) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> std/core/types/double;
// monadic lift
private fun .mlift2532-replayx : forall<(h :: H),(e :: E)> (extended_trace : (std/core/types/local-var :: (H, V) -> V)<(h :: H),(std/core/list :: V -> V)<std/core/types/double>>, index : (std/core/types/local-var :: (H, V) -> V)<(h :: H),std/core/types/int>, (std/core/list :: V -> V)<std/core/types/double>) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> std/core/types/double;
// monadic lift
private fun .mlift2533-replayx : forall<(h :: H),(e :: E)> (extended_trace : (std/core/types/local-var :: (H, V) -> V)<(h :: H),(std/core/list :: V -> V)<std/core/types/double>>, index : (std/core/types/local-var :: (H, V) -> V)<(h :: H),std/core/types/int>, wild_ : ()) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> std/core/types/double;
// monadic lift
private fun .mlift2534-replayx : forall<(h :: H),(e :: E)> (extended_trace : (std/core/types/local-var :: (H, V) -> V)<(h :: H),(std/core/list :: V -> V)<std/core/types/double>>, index : (std/core/types/local-var :: (H, V) -> V)<(h :: H),std/core/types/int>, std/core/types/int) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> std/core/types/double;
// monadic lift
private fun .mlift2535-replayx : forall<(h :: H),a,(e :: E)> ((std/core/list :: V -> V)<std/core/types/double>, x : a, std/core/types/int) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> ((std/core/list :: V -> V)<std/core/types/double>, a);
// monadic lift
private fun .mlift2536-replayx : forall<(h :: H),a,(e :: E)> (index : (std/core/types/local-var :: (H, V) -> V)<(h :: H),std/core/types/int>, x : a, (std/core/list :: V -> V)<std/core/types/double>) -> <(std/core/types/local :: H -> X)<(h :: H)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> ((std/core/list :: V -> V)<std/core/types/double>, a);
private fun replayx : forall<a,(e :: E)> (trace : effects-and-types/trace_values, action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> a) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> ((std/core/list :: V -> V)<std/core/types/double>, a);
// monadic lift
private fun .mlift2537-weighted : forall<(h :: H),(e :: E)> (s : effects-and-types/exp, wps : (std/core/types/local-var :: (H, V) -> V)<(h :: H),effects-and-types/exp>, effects-and-types/exp) -> <(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> ();
// monadic lift
private fun .mlift2538-weighted : forall<(h :: H),a,(e :: E)> (x : a, effects-and-types/exp) -> <(std/core/types/local :: H -> X)<(h :: H)>|(e :: E)> (effects-and-types/exp, a);
public fun weighted : forall<a,(e :: E)> (wp : effects-and-types/exp, action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>|(e :: E)> a) -> (e :: E) (effects-and-types/exp, a);
// monadic lift
private fun .mlift2539-yield_on_scorex : forall<(e :: E)> (wild_ : ()) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> ();
private fun yield_on_scorex : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
// monadic lift
private fun .mlift2540-advance-alt1 : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a, std/core/hnd/ev-index) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
public fun advance-alt1 : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a) -> (e :: E) ((a : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a);
// monadic lift
private fun .mlift2541-replay : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> a, std/core/hnd/ev-index) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> a;
public fun replay : forall<a,(e :: E)> (trace : effects-and-types/trace_values, action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> a) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> ((std/core/list :: V -> V)<std/core/types/double>, a);
// monadic lift
private fun .mlift2542-yield_on_score : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a, std/core/hnd/ev-index) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
public fun yield_on_score : forall<a,(e :: E)> (action : () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a) -> <(std/core/types/handled :: HX -> X)<(effects-and-types/score :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
fun finalize // inline size: 4
  = forall<a,(e :: E)> fn<(e :: E)>(action: () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/yield :: HX)>|(e :: E)> a){
    effects-and-types/.handle-yield<a,(e :: E),a>((std/core/int32(1)), (effects-and-types/.Hnd-yield<(e :: E),a>((std/core/hnd/Clause0<(),(effects-and-types/.hnd-yield :: (E, V) -> V),(e :: E),a>((fn<(e :: E)>(._wildcard_602_14: (std/core/hnd/marker :: (E, V) -> V)<(e :: E),a>, ._wildcard_602_17: (std/core/hnd/ev :: ((E, V) -> V) -> V)<(effects-and-types/.hnd-yield :: (E, V) -> V)>){
        std/core/types/();
      }))))), (fn<(e :: E)>(.x: a){
        .x;
      }), action);
  };
fun replay // inline size: 7
  = forall<a,(e :: E)> fn<<(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)>>(trace: effects-and-types/trace_values, action: () -> <(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)> a){
    handlers/replayx<a,(e :: E)>(trace, (fn<<(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)>>(){
        val x.2685 : std/core/hnd/ev-index
              = (std/core/hnd/.evv-index<<(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)>>(effects-and-types/.tag-sample));
        (match ((std/core/hnd/yielding())) {
          ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
             -> std/core/hnd/yield-extend<std/core/hnd/ev-index,a,<(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)>>((fn<<(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>,(std/core/types/handled :: HX -> X)<(effects-and-types/sample :: HX)>|(e :: E)>>(.y.73: std/core/hnd/ev-index){
              (handlers/.mlift2541-replay<a,(e :: E)>(action, .y.73));
            }));
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
             -> handlers/.mlift2541-replay<a,(e :: E)>(action, x.2685);
        });
      }));
  };