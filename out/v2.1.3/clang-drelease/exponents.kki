module interface exponents
 
//------------------------------
//#kki: import declarations
 
private import std/core/types = std/core/types = "";
private import std/core = std/core = "";
private import std/num/double = std/num/double = "";
private import std/num/ddouble = std/num/ddouble = "";
private import effects-and-types = effects-and-types = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
public fun div_exp : (effects-and-types/exp, effects-and-types/exp) -> effects-and-types/exp;
public fun double-to-exp : (d : std/core/types/double) -> effects-and-types/exp;
public fun e : (x : std/core/types/double) -> effects-and-types/exp;
public fun exp_to_double : (effects-and-types/exp) -> std/core/types/double;
public fun ln : (effects-and-types/exp) -> std/core/types/double;
public fun mult_exp : (effects-and-types/exp, effects-and-types/exp) -> effects-and-types/exp;
public fun plus_exp : (effects-and-types/exp, effects-and-types/exp) -> effects-and-types/exp;
public fun (>=) : (effects-and-types/exp, effects-and-types/exp) -> std/core/types/bool;
public fun show : (x : effects-and-types/exp) -> std/core/types/string;
public val zero-exp : effects-and-types/exp;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
fun div_exp // inline size: 2
  = fn(.pat_30_13: effects-and-types/exp, .pat_30_28: effects-and-types/exp){
    match (.pat_30_13) {
      ((.skip effects-and-types/Exp((xe: std/core/types/double) : std/core/types/double) : effects-and-types/exp ) as .pat: effects-and-types/exp)
         -> (match (.pat_30_28) {
          ((.skip effects-and-types/Exp((ye: std/core/types/double) : std/core/types/double) : effects-and-types/exp ) as .pat0: effects-and-types/exp)
             -> effects-and-types/Exp((std/core/(-.3)(xe, ye)));
        });
    };
  };
fun double-to-exp // inline size: 2
  = fn(d: std/core/types/double){
    effects-and-types/Exp((std/num/double/log(d)));
  };
fun e // inline size: 1
  = fn(x: std/core/types/double){
    effects-and-types/Exp(x);
  };
fun exp_to_double // inline size: 1
  = fn(.pat_22_19: effects-and-types/exp){
    std/num/double/exp((match (.pat_22_19) {
      ((.skip effects-and-types/Exp((x: std/core/types/double) : std/core/types/double) : effects-and-types/exp ) as .pat: effects-and-types/exp)
         -> x;
    }));
  };
inline fun ln // inline size: 0
  = fn(.pat_6_8: effects-and-types/exp){
    match (.pat_6_8) {
      ((.skip effects-and-types/Exp((xe: std/core/types/double) : std/core/types/double) : effects-and-types/exp ) as .pat: effects-and-types/exp)
         -> xe;
    };
  };
fun mult_exp // inline size: 2
  = fn(.pat_26_14: effects-and-types/exp, .pat_26_29: effects-and-types/exp){
    match (.pat_26_14) {
      ((.skip effects-and-types/Exp((xe: std/core/types/double) : std/core/types/double) : effects-and-types/exp ) as .pat: effects-and-types/exp)
         -> (match (.pat_26_29) {
          ((.skip effects-and-types/Exp((ye: std/core/types/double) : std/core/types/double) : effects-and-types/exp ) as .pat0: effects-and-types/exp)
             -> effects-and-types/Exp((std/core/(+.3)(xe, ye)));
        });
    };
  };
fun plus_exp // inline size: 10
  = fn(.pat_34_14: effects-and-types/exp, .pat_34_29: effects-and-types/exp){
    match (.pat_34_14) {
      ((.skip effects-and-types/Exp((xe: std/core/types/double) : std/core/types/double) : effects-and-types/exp ) as .pat: effects-and-types/exp)
         -> (match (.pat_34_29) {
          ((.skip effects-and-types/Exp((ye: std/core/types/double) : std/core/types/double) : effects-and-types/exp ) as .pat0: effects-and-types/exp)
             -> val ln_plus : (a : std/core/types/double, b : std/core/types/double) -> std/core/types/double
                      = fn(a: std/core/types/double, b: std/core/types/double){
                        std/core/(+.3)(a, (std/num/double/log1p((std/num/double/exp((std/core/(-.3)(b, a)))))));
                      };
            (match ((std/core/(<.4)(xe, ye))) {
              ((std/core/types/True() : std/core/types/bool ) as .pat1: std/core/types/bool)
                 -> effects-and-types/Exp((ln_plus(ye, xe)));
              ((.skip std/core/types/False() : std/core/types/bool ) as .pat2: std/core/types/bool)
                 -> effects-and-types/Exp((ln_plus(xe, ye)));
            });
        });
    };
  };
fun (>=) // inline size: 1
  = fn(.pat_14_11: effects-and-types/exp, .pat_14_26: effects-and-types/exp){
    match (.pat_14_11) {
      ((.skip effects-and-types/Exp((xe: std/core/types/double) : std/core/types/double) : effects-and-types/exp ) as .pat: effects-and-types/exp)
         -> (match (.pat_14_26) {
          ((.skip effects-and-types/Exp((ye: std/core/types/double) : std/core/types/double) : effects-and-types/exp ) as .pat0: effects-and-types/exp)
             -> std/core/(>=.2)(xe, ye);
        });
    };
  };
fun show // inline size: 8
  = fn(x: effects-and-types/exp){
    match (x) {
      ((.skip effects-and-types/Exp((h: std/core/types/double) : std/core/types/double) : effects-and-types/exp ) as .pat: effects-and-types/exp)
         -> std/core/(++.1)("Exp ", (std/core/(++.1)((std/core/show.1(h, (std/core/types/None<std/core/types/int>))), (std/core/(++.1)(" with probability: ", (std/num/ddouble/show-fixed((std/num/ddouble/pow((std/num/ddouble/Ddouble(2.718281828459045, 1.4456468917292502e-16)), (std/num/ddouble/ddouble(h)))), (std/core/types/None<std/core/types/int>))))))));
    };
  };