/* High resolution timer.
*/
module interface std/time/timer
 
//------------------------------
//#kki: import declarations
 
private import std/core/types = std/core/types = "";
private import std/core/hnd = std/core/hnd = "";
private import std/core = std/core = "";
private import std/num/double = std/num/double = "";
private import std/num/ddouble = std/num/ddouble = "";
private import std/time/timestamp = std/time/timestamp = "";
private import std/time/duration = std/time/duration = "";
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
private fun xticks : () -> <(std/core/types/ndet :: X)> (std/core/types/double, std/core/types/double);
// Return the smallest time difference in seconds that `ticks` can measure.
private fun xticks-resolution : () -> <(std/core/types/ndet :: X)> std/core/types/double;
// Return a high-resolution time stamp in fractional SI seconds.
// The duration is guaranteed to be monotonically increasing
// and have at least millisecond resolution.
public fun ticks : () -> <(std/core/types/ndet :: X)> std/time/duration/duration;
// monadic lift
private fun .mlift480-elapsed : forall<a,(e :: E)> (t0 : std/time/duration/duration, x : a) -> <(std/core/types/ndet :: X)|(e :: E)> (std/time/duration/duration, a);
// Return the number of fractional seconds that it takes to evaluate `action`.
public fun elapsed : forall<a,(e :: E)> (action : () -> <(std/core/types/ndet :: X)|(e :: E)> a) -> <(std/core/types/ndet :: X)|(e :: E)> (std/time/duration/duration, a);
// monadic lift
private fun .mlift481-print-elapsed : forall<a,(e :: E)> (msg : (std/core/types/optional :: V -> V)<std/core/types/string>, (std/time/duration/duration, a)) -> <(std/core/types/ndet :: X),(std/core/console :: X)|(e :: E)> a;
// Measure the number of fractional seconds that it takes to evaluate `action`, and print `msg` postfixed with the
// measured time in millisecond resolution.
public fun print-elapsed : forall<a,(e :: E)> (action : () -> <(std/core/types/ndet :: X),(std/core/console :: X)|(e :: E)> a, msg : (std/core/types/optional :: V -> V)<std/core/types/string>) -> <(std/core/types/ndet :: X),(std/core/console :: X)|(e :: E)> a;
// Return the smallest time difference in seconds that `ticks` can measure.
public fun ticks-resolution : () -> <(std/core/types/ndet :: X)> std/time/duration/duration;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
fun ticks // inline size: 7
  = fn<<(std/core/types/ndet :: X)>>(){
    match ((std/time/timer/xticks())) {
      ((.skip std/core/types/(,)((secs: std/core/types/double) : std/core/types/double, (frac: std/core/types/double) : std/core/types/double) : (std/core/types/double, std/core/types/double) ) as .pat: (std/core/types/double, std/core/types/double))
         -> std/time/duration/duration.1((std/core/int.3((std/num/double/truncate(secs)))), (std/core/types/Optional<std/core/types/double>((std/core/(+.3)((std/num/double/fraction(secs)), frac)))));
    };
  };
fun elapsed // inline size: 9
  = forall<a,(e :: E)> fn<<(std/core/types/ndet :: X)|(e :: E)>>(action: () -> <(std/core/types/ndet :: X)|(e :: E)> a){
    val t0 : std/time/duration/duration
      = std/time/timer/ticks();
    val x.482 : a
      = action();
    (match ((std/core/hnd/yielding())) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/hnd/yield-extend<a,(std/time/duration/duration, a),<(std/core/types/ndet :: X)|(e :: E)>>((fn<<(std/core/types/ndet :: X)|(e :: E)>>(x0: a){
          (std/time/timer/.mlift480-elapsed<a,(e :: E)>(t0, x0));
        }));
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> val t1 : std/time/duration/duration
                  = std/time/timer/ticks();
        std/core/types/(,)<std/time/duration/duration,a>((std/time/duration/(-)(t1, t0)), x.482);
    });
  };
fun ticks-resolution // inline size: 3
  = fn<<(std/core/types/ndet :: X)>>(){
    val secs.496 : std/core/types/double
          = std/time/timer/xticks-resolution();
    std/time/duration/Duration((std/time/timestamp/timespan.1(secs.496)));
  };