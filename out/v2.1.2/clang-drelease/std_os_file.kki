/* File operations.
*/
module interface std/os/file
 
//------------------------------
//#kki: import declarations
 
private import std/core/types = std/core/types = "";
private import std/core/hnd = std/core/hnd = "";
private import std/core = std/core = "";
private import std/os/path = std/os/path = "";
private import std/os/dir = std/os/dir = "";
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
private fun prepend : (exn : std/core/exception, pre : std/core/types/string) -> std/core/exception;
private fun read-text-file-err : (path : std/core/types/string) -> <(std/core/fsys :: X)> (std/core/error :: V -> V)<std/core/types/string>;
private fun write-text-file-err : (path : std/core/types/string, content : std/core/types/string) -> <(std/core/fsys :: X)> (std/core/error :: V -> V)<()>;
// Read a text file synchronously (using UTF8 encoding)
public fun read-text-file : (path : std/os/path/path) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> std/core/types/string;
// monadic lift
private fun .mlift476-write-text-file : (content : std/core/types/string, path : std/os/path/path, ()) -> ();
// Write a text file synchronously (using UTF8 encoding)
public fun write-text-file : (path : std/os/path/path, content : std/core/types/string, create-dir : (std/core/types/optional :: V -> V)<std/core/types/bool>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> ();
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
fun prepend // inline size: 3
  = fn(exn: std/core/exception, pre: std/core/types/string){
    std/core/Exception((std/core/(++.1)(pre, (std/core/(++.1)(": ", (match (exn) {
            ((.skip std/core/Exception((.x: std/core/types/string) : std/core/types/string, (.pat0: std/core/exception-info) : std/core/exception-info) : std/core/exception ) as .pat: std/core/exception)
               -> .x;
          }))))), (match (exn) {
        ((.skip std/core/Exception((.pat00: std/core/types/string) : std/core/types/string, (.x0: std/core/exception-info) : std/core/exception-info) : std/core/exception ) as .pat1: std/core/exception)
           -> .x0;
      }));
  };
fun read-text-file // inline size: 9
  = fn<<(std/core/fsys :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>>>(path: std/os/path/path){
    match (val .x1 : std/core/types/string
                 = (std/core/hnd/.open-none1<std/os/path/path,std/core/types/string,(std/core/types/(<>) :: E),<(std/core/fsys :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>>>(std/os/path/string, path));
    (std/core/hnd/.open-none1<std/core/types/string,(std/core/error :: V -> V)<std/core/types/string>,<(std/core/fsys :: X)>,<(std/core/fsys :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>>>(std/os/file/read-text-file-err, .x1))) {
      ((std/core/Error(((.skip std/core/Exception((.pat0: std/core/types/string) : std/core/types/string, (.pat1: std/core/exception-info) : std/core/exception-info) : std/core/exception ) as exn: std/core/exception) : std/core/exception) : (std/core/error :: V -> V)<std/core/types/string> ) as .pat: ((std/core/error :: V -> V)<std/core/types/string>))
         -> val err.479 : (std/core/error :: V -> V)<std/core/types/string>
                  = std/core/Error<std/core/types/string>(val .x2 : std/core/types/string
                                                                = (std/core/(++.1)("unable to read text file ", (std/core/hnd/.open-none1<std/os/path/path,std/core/types/string,(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)>>(std/os/path/show, path))));
                  (std/core/hnd/.open-none2<std/core/exception,std/core/types/string,std/core/exception,(std/core/types/(<>) :: E),<(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)>>(std/os/file/prepend, exn, .x2)));
        (match (err.479) {
          ((std/core/Error(((.skip std/core/Exception((.pat00: std/core/types/string) : std/core/types/string, (.pat10: std/core/exception-info) : std/core/exception-info) : std/core/exception ) as exn0: std/core/exception) : std/core/exception) : (std/core/error :: V -> V)<std/core/types/string> ) as .pat2: ((std/core/error :: V -> V)<std/core/types/string>))
             -> std/core/throw-exn<std/core/types/string>(exn0);
          ((.skip std/core/Ok((x: std/core/types/string) : std/core/types/string) : (std/core/error :: V -> V)<std/core/types/string> ) as .pat20: ((std/core/error :: V -> V)<std/core/types/string>))
             -> x;
        });
      ((.skip std/core/Ok((content: std/core/types/string) : std/core/types/string) : (std/core/error :: V -> V)<std/core/types/string> ) as .pat21: ((std/core/error :: V -> V)<std/core/types/string>))
         -> content;
    };
  };