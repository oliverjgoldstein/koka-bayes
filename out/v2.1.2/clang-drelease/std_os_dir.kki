/* Directory operations.
*/
module interface std/os/dir
 
//------------------------------
//#kki: import declarations
 
private import std/core/types = std/core/types = "";
private import std/core/hnd = std/core/hnd = "";
private import std/core = std/core = "";
private import std/os/path = std/os/path = "";
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
// An alias for pure effects: a pure function always returns the same result
// when called with the same arguments but may not terminate or raise an exception.
local alias std/core/pure :: E = <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/types/div :: X)> = 1;
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
private fun prepend : (exn : std/core/exception, pre : std/core/types/string) -> std/core/exception;
private fun prim-copy-file : (from : std/core/types/string, to : std/core/types/string, preserve-mtime : std/core/types/bool) -> <(std/core/fsys :: X)> (std/core/error :: V -> V)<()>;
private fun ensure-dir-err : (path : std/core/types/string, mode : std/core/types/int) -> <(std/core/fsys :: X)> (std/core/error :: V -> V)<()>;
private fun prim-is-dir : (dir : std/core/types/string) -> <(std/core/fsys :: X)> std/core/types/bool;
private fun prim-list-dir : (dir : std/core/types/string) -> <(std/core/fsys :: X)> (std/core/error :: V -> V)<(std/core/types/vector :: V -> V)<std/core/types/string>>;
private fun prim-is-file : (path : std/core/types/string) -> <(std/core/fsys :: X)> std/core/types/bool;
// Copy a file.
public fun copy-file : (from : std/os/path/path, to : std/os/path/path, preserve-mtime : (std/core/types/optional :: V -> V)<std/core/types/bool>) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> ();
// Ensure a directory path exists
public fun ensure-dir : (dir : std/os/path/path) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> ();
// Is the path a valid directory?
public fun is-directory : (dir : std/os/path/path) -> <(std/core/fsys :: X)> std/core/types/bool;
// List directory contents (excluding `.` and `..`).
// Returns a list of full paths (not just the names in the directory).
public fun list-directory : (dir : std/os/path/path) -> <(std/core/fsys :: X)> (std/core/list :: V -> V)<std/os/path/path>;
// monadic lift
private fun .mlift1407-copy-directory : (dirs : (std/core/list :: V -> V)<std/os/path/path>, to : std/os/path/path, wild_0 : ()) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X),(std/core/types/div :: X)> ();
// monadic lift
private fun .mlift1408-copy-directory : (to : std/os/path/path, ((std/core/list :: V -> V)<std/os/path/path>, (std/core/list :: V -> V)<std/os/path/path>)) -> <(std/core/fsys :: X),(std/core/types/div :: X),(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>> ();
// monadic lift
private fun .mlift1409-copy-directory : (dir : std/os/path/path, to : std/os/path/path, wild_ : ()) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> ();
public fun copy-directory : (dir : std/os/path/path, to : std/os/path/path) -> <(std/core/pure :: E),(std/core/fsys :: X)> ();
// Copy a file to a directory
public fun copy-file-to-dir : (from : std/os/path/path, dir : std/os/path/path) -> <(std/core/types/handled :: HX -> X)<(std/core/exn :: HX)>,(std/core/fsys :: X)> ();
// Is the path a valid file?
public fun is-file : (path : std/os/path/path) -> <(std/core/fsys :: X)> std/core/types/bool;
// Recursively list all the entries under a directory.
public fun list-directory-recursive : (dir : std/os/path/path, max-depth : (std/core/types/optional :: V -> V)<std/core/types/int>) -> <(std/core/types/div :: E),(std/core/fsys :: X)> (std/core/list :: V -> V)<std/os/path/path>;
 
//------------------------------
//#kki: external declarations
 
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
fun prepend // inline size: 3
  = fn(exn: std/core/exception, pre: std/core/types/string){
    std/core/Exception((std/core/(++.1)(pre, (std/core/(++.1)(": ", (match (exn) {
            ((.skip std/core/Exception((.x: std/core/types/string) : std/core/types/string, (.pat0: std/core/exception-info) : std/core/exception-info) : std/core/exception ) as .pat: std/core/exception)
               -> .x;
          }))))), (match (exn) {
        ((.skip std/core/Exception((.pat00: std/core/types/string) : std/core/types/string, (.x0: std/core/exception-info) : std/core/exception-info) : std/core/exception ) as .pat1: std/core/exception)
           -> .x0;
      }));
  };
fun is-directory // inline size: 2
  = fn<<(std/core/fsys :: X)>>(dir: std/os/path/path){
    std/os/dir/prim-is-dir((std/os/path/string(dir)));
  };
fun is-file // inline size: 2
  = fn<<(std/core/fsys :: X)>>(path: std/os/path/path){
    std/os/dir/prim-is-file((std/os/path/string(path)));
  };